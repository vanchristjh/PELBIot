version: '3.8'

services:
  # ===== MySQL Database Service =====
  mysql:
    image: mysql:8.0-alpine
    container_name: pelbiot-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-root}
      MYSQL_DATABASE: ${DB_NAME:-pelbiot}
      MYSQL_USER: ${DB_USER:-pelbiot}
      MYSQL_PASSWORD: ${DB_PASSWORD:-pelbiot123}
      MYSQL_CHARSET: utf8mb4
      MYSQL_COLLATION: utf8mb4_unicode_ci
    ports:
      - "${DB_PORT:-3306}:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./backend/database.sql:/docker-entrypoint-initdb.d/01-database.sql
      - ./backend/init.sql:/docker-entrypoint-initdb.d/02-init.sql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10
      interval: 10s
    networks:
      - pelbiot_network
    command: --default-authentication-plugin=mysql_native_password

  # ===== Redis Cache Service =====
  redis:
    image: redis:7-alpine
    container_name: pelbiot-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis123} --appendonly yes
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 10s
      retries: 5
      interval: 10s
    networks:
      - pelbiot_network

  # ===== Node.js Backend Service =====
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: pelbiot-backend
    restart: unless-stopped
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      # Server Configuration
      PORT: 5000
      NODE_ENV: ${NODE_ENV:-production}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
      
      # Database Configuration
      DB_HOST: mysql
      DB_PORT: 3306
      DB_USER: ${DB_USER:-pelbiot}
      DB_PASSWORD: ${DB_PASSWORD:-pelbiot123}
      DB_NAME: ${DB_NAME:-pelbiot}
      
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis123}
      
      # Email Configuration
      EMAIL_SERVICE: ${EMAIL_SERVICE:-gmail}
      EMAIL_HOST: ${EMAIL_HOST:-smtp.gmail.com}
      EMAIL_PORT: ${EMAIL_PORT:-587}
      EMAIL_USER: ${EMAIL_USER}
      EMAIL_PASSWORD: ${EMAIL_PASSWORD}
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-this}
      JWT_EXPIRE: ${JWT_EXPIRE:-7d}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-your-refresh-secret}
      JWT_REFRESH_EXPIRE: ${JWT_REFRESH_EXPIRE:-30d}
      
      # Sentry Configuration
      SENTRY_DSN: ${SENTRY_DSN}
      SENTRY_ENVIRONMENT: ${SENTRY_ENVIRONMENT:-production}
      SENTRY_TRACES_SAMPLE_RATE: ${SENTRY_TRACES_SAMPLE_RATE:-0.1}
      
      # Rate Limiting Configuration
      RATE_LIMIT_WINDOW_MS: ${RATE_LIMIT_WINDOW_MS:-900000}
      RATE_LIMIT_MAX_REQUESTS: ${RATE_LIMIT_MAX_REQUESTS:-100}
      RATE_LIMIT_DDoS_THRESHOLD: ${RATE_LIMIT_DDoS_THRESHOLD:-1000}
      
      # Circuit Breaker Configuration
      CIRCUIT_BREAKER_FAILURE_THRESHOLD: ${CIRCUIT_BREAKER_FAILURE_THRESHOLD:-5}
      CIRCUIT_BREAKER_SUCCESS_THRESHOLD: ${CIRCUIT_BREAKER_SUCCESS_THRESHOLD:-2}
      CIRCUIT_BREAKER_TIMEOUT_MS: ${CIRCUIT_BREAKER_TIMEOUT_MS:-60000}
      
      # Feature Flags
      ENABLE_EMAIL_NOTIFICATIONS: ${ENABLE_EMAIL_NOTIFICATIONS:-true}
      ENABLE_SENTRY_TRACKING: ${ENABLE_SENTRY_TRACKING:-true}
      ENABLE_PERFORMANCE_MONITORING: ${ENABLE_PERFORMANCE_MONITORING:-true}
      
      # Logging
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
    
    ports:
      - "${PORT:-5000}:5000"
    
    volumes:
      - ./backend:/app
      - /app/node_modules
      - logs:/app/logs
    
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      timeout: 10s
      retries: 5
      interval: 30s
    
    networks:
      - pelbiot_network
    
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  # Frontend Application
  frontend:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: pelbiot-frontend
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost/api}
      REACT_APP_SOCKET_URL: ${REACT_APP_SOCKET_URL:-http://localhost}
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - pelbiot-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

  # phpMyAdmin (optional, for database management)
  phpmyadmin:
    image: phpmyadmin:latest
    container_name: pelbiot-phpmyadmin
    environment:
      PMA_HOST: mysql
      PMA_USER: ${MYSQL_USER:-pelbiot}
      PMA_PASSWORD: ${MYSQL_PASSWORD:-pelbiot_password}
      PMA_PORT: 3306
    ports:
      - "8080:80"
    depends_on:
      - mysql
    networks:
      - pelbiot-network
    restart: unless-stopped
    profiles:
      - debug

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  logs:
    driver: local

networks:
  pelbiot_network:
    driver: bridge
