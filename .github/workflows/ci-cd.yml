name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: pelbiot_test
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run linter
      working-directory: ./backend
      run: npm run lint --if-present || true
    
    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_HOST: localhost
        DATABASE_NAME: pelbiot_test
        DATABASE_USER: root
        DATABASE_PASSWORD: root
      run: npm test
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        files: ./backend/coverage/lcov.info
        flags: backend

  # Frontend Tests
  frontend-tests:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint --if-present || true
    
    - name: Build
      run: npm run build
    
    - name: Run tests
      run: npm test -- --coverage --watchAll=false || true

  # Docker Build
  docker-build:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [backend-tests, frontend-tests]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      if: secrets.DOCKER_USERNAME != ''
    
    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: ${{ secrets.DOCKER_USERNAME != '' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/pelbiot-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/pelbiot-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: ./
        file: ./Dockerfile
        push: ${{ secrets.DOCKER_USERNAME != '' }}
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/pelbiot-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/pelbiot-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Security Scan
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        trivy-config: trivy.yaml
      continue-on-error: true

  # Code Quality
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install dependencies
      working-directory: ./backend
      run: npm ci
    
    - name: Run ESLint
      working-directory: ./backend
      run: npm run lint --if-present || true
      continue-on-error: true

  # Deployment (Disabled - use separate deploy.yml with workflow_dispatch)
  deploy:
    runs-on: ubuntu-latest
    if: false  # Disabled - use manual trigger in deploy.yml instead
    needs: [docker-build, security-scan]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Deployment disabled
      run: echo "Use deploy.yml with workflow_dispatch for manual deployment"
